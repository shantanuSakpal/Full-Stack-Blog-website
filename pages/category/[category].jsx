import { CategoryTabs } from '@/components/CategoryTabs'
import React from 'react'
import { fetchArticles, fetchCategories } from '../api'
import qs from "qs"
import SearchBar from '@/components/SearchBar'
import Head from 'next/head'
import ArticlesList from '@/components/ArticlesList'
import _ from "lodash"
import { useRouter } from 'next/router';

export default function category(props) {
    const CategoryArr = props.categories //array of categories
    const ArticleArr = props.articles
    const slug = props.slug
    const router = useRouter();

    function currentCategory(slug) {
        if (typeof (slug) === 'string') { return _.startCase(slug) }

        return ""
    }
    function handleOnSearch(query) {
        router.push(`/?search=${query}`)
    }
    return (
        <>
            <Head>
                <title> {currentCategory(slug)}</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="https://kollaborate.co/_next/image?url=%2Fimages%2Flogo.png&w=48&q=75" />
            </Head>
            <div className='flex justify-between'>
                <CategoryTabs categoryArr={CategoryArr} />
                <SearchBar handleOnSearch={handleOnSearch} />
            </div>
            <div className='w-full h-fit border-4 rounded-md border-gray-200 p-4'>
                <ArticlesList articlesList={ArticleArr} />
            </div>
        </>
    )
}

export async function getServerSideProps({ query }) {
    console.log(query.search)

    const options = {
        populate: '*',
        filters: {
            category: {
                slug: query.category,
            }
        }
    }
    const queryString = qs.stringify(options);

    //fetch categories here
    const categories = await fetchCategories();
    //fetch articles here
    const articles = await fetchArticles(queryString);

    if (query.search) {
        console.log(query.search)
        options.filters = {
            Title: {
                $containsi: query.search,
            }
        }
    }

    return {
        props: {

            categories: categories.data.data,
            articles: articles.data.data,
            slug: query.category



        }, // will be passed to the page component as props
    }


}